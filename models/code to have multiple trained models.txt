import os
import math
import cv2
from cvzone.HandTrackingModule import HandDetector
from cvzone.ClassificationModule import Classifier
import numpy as np
import time
import sys
import tensorflow as tf

# Suppress TensorFlow logging
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '4'
tf.get_logger().setLevel('ERROR')

# Video file input
videofile = sys.argv[1]
cap = cv2.VideoCapture(videofile)

# Hand detector
detector = HandDetector(maxHands=1)

# Load multiple classifiers
model_paths = [
    "path_to_first_model.h5",
    "path_to_second_model.h5",
    # Add paths to more models if needed
]
label_path = "path_to_labels.txt"

classifiers = [Classifier(model_path, label_path) for model_path in model_paths]

offset = 25
imgSize = 300

labels = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", " "]
character = ""

while True:
    success, img = cap.read()
    if not success:
        break

    imgOutput = img.copy()
    hands, img = detector.findHands(img)

    if hands:
        hand = hands[0]
        x, y, w, h = hand['bbox']

        imgWhite = np.ones((imgSize, imgSize, 3), np.uint8) * 255
        imgCrop = img[y - offset:y + h + offset, x - offset:x + w + offset]

        imgCropShape = imgCrop.shape
        aspectRatio = h / w

        if aspectRatio > 1:
            k = imgSize / h
            wCal = math.ceil(k * w)
            imgResize = cv2.resize(imgCrop, (wCal, imgSize))
            imgResizeShape = imgResize.shape
            wGap = math.ceil((imgSize - wCal) / 2)
            imgWhite[:, wGap:wCal + wGap] = imgResize
        else:
            k = imgSize / w
            hCal = math.ceil(k * h)
            imgResize = cv2.resize(imgCrop, (imgSize, hCal))
            imgResizeShape = imgResize.shape
            hGap = math.ceil((imgSize - hCal) / 2)
            imgWhite[hGap:hCal + hGap, :] = imgResize

        # Get predictions from each classifier and store the results
        predictions = []
        for classifier in classifiers:
            prediction, index = classifier.getPrediction(imgWhite, draw=False)
            predictions.append((prediction, index))

        # Combine predictions (here using a simple majority vote for demonstration)
        indices = [pred[1] for pred in predictions]
        final_index = max(set(indices), key=indices.count)
        character += labels[final_index]

        cv2.rectangle(imgOutput, (x - offset, y - offset - 50), (x - offset + 150, y - offset - 50 + 50), (255, 0, 255), 4)
        cv2.putText(imgOutput, labels[final_index], (x, y - 20), cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 0, 255), 2)
        cv2.rectangle(imgOutput, (x - offset, y - offset), (x + w + offset, y + h + offset), (255, 0, 255), 4)

    cv2.imshow("Image", imgOutput)
    cv2.waitKey(2)

print(character)
